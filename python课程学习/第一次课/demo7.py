# 内置函数的学习
# 内置函数是Python内置对象类型之一，不需要额外导入任何模块即可直接使用，
# 这些内置对象都封装在内置模块__builtins__之中
# 用C语言实现并且进行了大量优化，具有非常快的运行速度，推荐优先使用
#
import sys

# 1.使用内置函数dir()可以查看所有内置函数和内置对象：dir(__builtins__)
print(dir(__builtins__))

# 2. 使用help(函数名)可查看某个函数用法：help(sum)
print(help(id))
print(help(sum))
print(help(type))

# 3. 可导入sys模块后使用print(sys.builtin_module_names)查看Python所有内置模块名称
print(sys.builtin_module_names)

# 4. 可以使用help('modules')查看本机所有可用模块的名称
help('re')   # 查看re模块的使用help

# 5. 常用的内置函数

# 5.1 进制转换函数bin()、oct()、int()、hex()用来将数字转换为二进制、八进制、十进制和十六进制形式

# 5.2 str函数 ord函数与chr函数 ord()和chr()功能相反
# ord()用来返回单个字符的Unicode码
# 而chr()则用来返回Unicode编码对应的字符
# str()则直接将其任意类型参数转换为字符串
print(ord('a'))
print(chr(97))
print(str((1, 2, 3)))

# 5.3 统计函数 max() min() sum()  len()求可迭代对象的Size eval()计算并返回字符串s中表达式的值
# 分别用于计算列表、元组或其他可迭代对象中所有元素最大值、最小值以及所有元素之和
# sum()只支持数值型元素的序列或可迭代对象
# max()和min()则要求序列或可迭代对象中的元素之间可比较大小
# 计算平均值 sum(a)/len(a)

# 5.4 type()和isinstance()用来判断数据类型，常用来对函数参数进行检查，可避免错误的参数类型导致函数崩溃或返回意料之外的结果

# 5.5 input 与 print
# print 函数可输出信息到标准控制台或指定文件
# print(value1,value2,...,sep='',end='\n',file=sys.stdout,flush=False)
# value参数之前为需要输出的内容（可以有多个）
# sep参数指定数据之间的分隔符
# 默认为空格end参数指定输出完数据之后再输出什么字符 默认为换行
# file参数指定输出位置 默认标准控制台 可重定向到文件
x = input('请输入:')  # 输入进来都是str类型
print(type(x))
print(type(x))
print(x)
# 写入文件
with open('a.txt', 'a+') as fp:
    print('aaa', file=fp)

# 5.6 open函数 文件打开函数, 对文件操作函数
# open(name[, mode[, buffering]])
# name: 文件名
# mode 决定了打开文件的模式
# buffering: 如果 buffering 的值被设为 0,就不会有寄存。
# 如果 buffering 的值取 1,访问文件时会寄存
# 如果将 buffering 的值设为大于 1 的整数,表明了这就是的寄存区的缓冲大小
# 如果取负值，寄存区的缓冲大小则为系统默认

# mode :
# r:以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb:以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。
# r+:打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+:以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。
# w:打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb:以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# w+:打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# a:打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# ab:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
# a+:打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
# ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。
