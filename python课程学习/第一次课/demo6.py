
# 1. +
# +运算符除了用于算术加法以外，
# 还可以用于列表、元组、字符串的连接，
# 但不支持不同类型的对象之间相加或连接
print(1+2)
print('demo3_1'+'demo3_1')
print([1, 2]+[3, 4])
print(True + 3)
# print(1+'demo3_1')   不支持字符与数字相加，抛出异常

# 2. 集合运算符
{1, 2, 3, 4, 5} - {3}   # 差集
{1, 2, 3, 4, 5} | {6}   # 并集
{1, 2, 3, 4, 5} & {3}   # 交集
{1, 2, 3, 4, 5, 6} ^ {5, 6, 7, 8}  # 对称差集

# 3.  *
# 运算符不仅可用于数值乘法，
# 还可用于列表、字符 串、元组等类型，
# 当列表、字符串或元组等类型变量与整数进行"*"运算时表示对内容进行重复并返回重复后的新对象。
# 字典和集合不支持与整数的相乘，因为其中的元素是不允许重复的
print("-" * 10)
print(1 * 2)
print((3+4j) * (3-4j))
print([1, 2, 3] * 3)

# 4. /和//
# 运算符/和//在Python中分别表示算术除法和算术求整商
print(15 / 4)
print(15 // 4)

# 5. %
# %运算符除去可以用于字符串格式化之外，
# 还可以对整数和浮点数计算余数
print(3 % 2)

# 6. 关系运算符
# Python关系运算符最大的特点是可以连用，
# 关系运算符使用的前提是操作数之间必须可比较大小。
# 也可用于测试集合之间的包含关系
print(5 > 3)
print(1 < 5 > 3)  # 等价于1 < 5 and 5 > 3
print(1 < 5 < 3)  # 等价于1 < 5 and 5 < 3
print([1, 2] < [1, 3])  # 比较列表的大小 这个我不太明白
print({1, 2, 3} < {1, 2, 3, 4})  # 测试是否子集 是否包含

# 7. in 成员存在运算符
# 子字符串测试
# 测试一个对象是 否为另一个对象的元素
# 成员遍历时用到
print(3 in [1, 2, 3])
print('abc' in 'abcdefg')
for x in [1, 2, 3]:
    print(x)

# 8. 同一性测试运算符is
# == 与 is的区别
# == 是比较两个对象的内容是否相等，即两个对象的值是否相等，不管两者在内存中的引用地址是否一样。
# is 比较的是两个实例对象是不是完全相同，它们是不是同一个对象，占用的内存地址是否相同。
# 即is比较两个条件：1.内容相同。2.内存中地址相同 比较id是否相同
# 而 == 只比较值
x = 3
y = 3
print(x is y)  # 因为 x,y都是引用类型也就是指针 他们都指向3这个地址
x = [1, 2, 3]
y = [1, 2, 3]
print(x is y)  # 上面形式创建的x和y不是同一个列表对象 False
print(x == y)  # 但是他们的值相同  True

# 9. 位运算符 <<左移 >>右移 |位或 &位与 ^位异或
# 位运算符只能用于整数，其内部执行过程为：
# 首先 将整数转换为二进制数，然后右对齐，必要的时候左 侧补0，按位进行运算，
# 最后再把计算结果转换为十进制数字返回
# 位运算规则可自行查找查看


