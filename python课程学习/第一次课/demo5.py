# 变量

# 1.不需要事先声明变量名及其类型，直接赋值即可创建强类型编程语言
# 2.根据赋值或运算来推断变量类型动态类型语言
# 3.变量的类型也是可以随时变化的
# 4.Python变量不直接存储值，而是存储值对象的引用
# 5.当为变量修改值后其内存地址将会变化
# Python具有自动内存管理功能，对于没有任何变量指向的值，Python自动将其删除
# 显式使用del命令删除不需要的值或显式关闭不再需要访问的资源，仍是优秀程序员的好习惯
# 6.变量命名的约束:
# 变量名必须以字母或下划线开头，大小写敏感，不能有空格以及标点符号
# 以下划线开头的变量在Python中有特殊含义；
# 不能使用关键字作变量名，
# 可导入keyword模块后用print(keyword.kwlist)查看所有Python关键字；
# 不建议使用系统内置模块名、类型名或函数名以及已导入的模块名及其成员名作变量名，
# 可通过dir(__builtins__)查看所有内置模块、类型和函数

# 内置函数isidentifier()可以用来判断指定字符串是否可以作为变量名、函数名、类名等标识符
print('abc'.isidentifier())
# 内置函数isinstance()用来测试对象是否为指定类型的实例
# 内置函数type()用来返回变量类型
# 内置函数id()用来返回变量地址
x = 1
print(type(x))
print(isinstance(x, int))

# 可使用下标来访问并修改列表、字典等可变序列以及其他自定义对象中的元素
dict1 = {'1': 1, '2': 1, '3': 2}
print(dict1)
dict1['1'] = 2
print(dict1)

# 字符串和元组属于不可变序列，不能通过下标的方式来修改其中的元素值
# 试图修改元组中元素的值时会抛出异常

# Python采用基于值的内存管理方式，
# 不同变量的值相同且为不大于256的整数时，该值在内存中只有一份
# 但是实验结果还是内存相同
# Python不会对实数进行缓存，
# 交互模式下同值不同名的变量不共用同一个内存空间，
# 同一个程序中的同值不同名变量会共用同一个内存空间。
# 短字符串会共同一个内存空间，而长字符串不遵守这个约定。
num1 = 2
num2 = 2
num3 = 266655
num4 = 266655
num5 = 3.0
num6 = 3.0
print(id(2))
print(id(266655))
# print(id(num1))
# print(id(num2))
# print(id(num2) == id(num1))
print(id(num3))
# print(id(num4))
# print(id(num3) == id(num4))
# print(id(num5))
# print(id(num6))
# print(id(num5) == id(num6))

